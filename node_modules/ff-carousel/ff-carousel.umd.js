(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :
	(factory((global['ff-carousel'] = {}),global.core,global.common));
}(this, (function (exports,core,common) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CarouselComponent = (function () {
    function CarouselComponent(el) {
        this.el = el;
        this.autoplay = false;
        this.interval = 2000;
        this.animationDuration = 500;
        this.buttons = true;
        this.selectItem = true;
        this.shadow = '';
        this.urlPrefix = '';
        this._images = [];
        this.amountClone = 0;
        this.animation = false;
        this.transition = '0s';
    }
    Object.defineProperty(CarouselComponent.prototype, "images", {
        get: /**
         * @return {?}
         */
        function () {
            return this._images;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._images = value;
            this.init();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CarouselComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.onLoad = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        this.stop();
        if (!this.images) {
            this.images = [];
        }
        this.slideWidth = this.getWidth(this.el.nativeElement.querySelector('.ff-slider__slide'));
        this.sliderWidth = this.getWidth(this.el.nativeElement);
        this.length = this.images.length;
        this.center = (this.sliderWidth - (this.length * this.slideWidth)) / 2 - (this.slideWidth * (this.length - 1) / 2);
        this.left = this.center;
        this.amountClone = Math.round(this.sliderWidth / (this.length * this.slideWidth) * 2);
        this.play();
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    CarouselComponent.prototype.getWidth = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        if (!elem) {
            return;
        }
        var /** @type {?} */ style = elem.currentStyle || window.getComputedStyle(elem), /** @type {?} */
        width = elem.offsetWidth, /** @type {?} */
        margin = parseFloat(style.marginLeft) + parseFloat(style.marginRight), /** @type {?} */
        padding = parseFloat(style.paddingLeft) + parseFloat(style.paddingRight), /** @type {?} */
        border = parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);
        return width + margin + padding + border;
    };
    /**
     * @param {?=} left
     * @return {?}
     */
    CarouselComponent.prototype.nextSlide = /**
     * @param {?=} left
     * @return {?}
     */
    function (left) {
        var _this = this;
        if (left === void 0) { left = 1; }
        if (this.animation) {
            return;
        }
        this.animation = true;
        this.transition = this.animationDuration + "ms ease";
        this.left += left * -this.slideWidth;
        window.setTimeout(function () {
            while (left) {
                var /** @type {?} */ first = _this.el.nativeElement.querySelectorAll('.ff-slider__slide')[0];
                _this.el.nativeElement.querySelector('.ff-slider__tracker').appendChild(first);
                left--;
            }
            _this.transition = '0s';
            _this.left = _this.center;
            _this.animation = false;
        }, this.animationDuration);
    };
    /**
     * @param {?=} left
     * @return {?}
     */
    CarouselComponent.prototype.previousSlide = /**
     * @param {?=} left
     * @return {?}
     */
    function (left) {
        var _this = this;
        if (left === void 0) { left = 1; }
        if (this.animation) {
            return;
        }
        this.animation = true;
        this.transition = this.animationDuration + "ms ease";
        this.left += left * this.slideWidth;
        window.setTimeout(function () {
            while (left) {
                var /** @type {?} */ last = _this.el.nativeElement.querySelectorAll('.ff-slider__slide')[_this.el.nativeElement.querySelectorAll('.ff-slider__slide').length - 1];
                _this.el.nativeElement.querySelector('.ff-slider__tracker').prepend(last);
                left--;
            }
            _this.transition = '0s';
            _this.left = _this.center;
            _this.animation = false;
        }, this.animationDuration);
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.play = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.autoplay) {
            if (this.timer) {
                return;
            }
            this.timer = setInterval(function () {
                _this.nextSlide(1);
            }, this.interval);
        }
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.stop = /**
     * @return {?}
     */
    function () {
        clearInterval(this.timer);
        this.timer = null;
    };
    /**
     * @param {?} i
     * @return {?}
     */
    CarouselComponent.prototype.select = /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        if (this.animation) {
            return;
        }
        var /** @type {?} */ position = this.position(i), /** @type {?} */
        center = this.slideWidth * this.length - this.slideWidth;
        if (center === position.left) {
            return;
        }
        else if (center > position.left) {
            this.previousSlide((center - position.left) / this.slideWidth);
        }
        else if (center < position.left) {
            this.nextSlide((center - position.left) / -this.slideWidth);
        }
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stop();
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    CarouselComponent.prototype.offset = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        if (!elem) {
            return {
                top: 0,
                left: 0
            };
        }
        var /** @type {?} */ rect, /** @type {?} */ win;
        if (!elem.getClientRects().length) {
            return { top: 0, left: 0 };
        }
        rect = elem.getBoundingClientRect();
        win = elem.ownerDocument.defaultView;
        return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
        };
    };
    
    /**
     * @param {?} elem
     * @return {?}
     */
    CarouselComponent.prototype.position = /**
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        if (!elem) {
            return {
                left: 0,
                top: 0
            };
        }
        var /** @type {?} */ offsetParent, /** @type {?} */ offset, /** @type {?} */ doc, /** @type {?} */
        parentOffset = { top: 0, left: 0 };
        if (elem.style.position === 'fixed') {
            offset = elem.getBoundingClientRect();
        }
        else {
            offset = this.offset(elem);
            doc = elem.ownerDocument;
            offsetParent = elem.offsetParent || doc.documentElement;
            while (offsetParent &&
                (offsetParent === doc.body || offsetParent === doc.documentElement) &&
                offsetParent.style.position === "static") {
                offsetParent = offsetParent.parentNode;
            }
            if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
                parentOffset = this.offset(offsetParent);
                parentOffset.top += offsetParent.style.borderTopWidth;
                parentOffset.left += offsetParent.style.borderLeftWidth;
            }
        }
        var /** @type {?} */ style = elem.currentStyle || window.getComputedStyle(elem);
        return {
            top: offset.top - parentOffset.top - parseFloat(style.marginTop),
            left: offset.left - parentOffset.left - parseFloat(style.marginLeft)
        };
    };
    CarouselComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ff-carousel',
                    template: "<div *ngIf=\"images && images.length\" class=\"ff-slider\" (mouseout)=\"play()\" (mouseover)=\"stop()\"> <div class=\"prev\" (click)=\"previousSlide()\"></div> <div class=\"ff-slider__list\"> <div class=\"ff-slider__tracker\" [ngStyle]=\"{left: left+'px', transition : transition}\"> <div #slide class=\"ff-slider__slide\" *ngFor=\"let image of (images | clone:amountClone);let i = index\" [ngClass]=\"{'center': i === currentTarget}\" (click)=\"selectItem ? select(slide) : false\"> <img #img *ngIf=\"image.url\" src=\"{{urlPrefix + image.url}}\" alt=\"\" (load)=\"i===0 ? onLoad(img): 0\"> <img *ngIf=\"shadow\" src=\"{{urlPrefix + shadow}}\" alt=\"\"> <h2 *ngIf=\"image.title\">{{image.title}}</h2> </div> </div> </div> <div class=\"next\" (click)=\"nextSlide()\"></div> </div> ",
                    styles: [":host { display: block; margin: auto; } :host * { user-drag: none; user-select: none; -moz-user-select: none; -webkit-user-drag: none; -webkit-user-select: none; -ms-user-select: none; } .slides { padding: 20px; list-style: none; position: relative; display: flex; justify-content: center; } li { min-width: 75px; margin: 0px 35px; text-align: center; display: flex; flex-flow: column; justify-content: flex-end; align-items: center; opacity: 0.25; } li:not(.center) { cursor: pointer; } img { display: block; width: auto; max-width: 100%; margin: auto; max-height: 100%; } .center { transform: scale(1); opacity: 1; margin: 0 80px; } @media (max-width: 768px) { .center { margin: 0 30px; } } @media (max-width: 835px) { .center { margin: 0 65px; } } @media (max-width: 480px) { .center { margin: 0 40px; } } .prev { content: \"\"; display: block; position: absolute; width: 0; height: 0; border-top: 18px solid transparent; border-bottom: 18px solid transparent; border-right: 18px solid #173e49; margin-left: -18px; } .next { content: \"\"; display: block; position: absolute; width: 0; height: 0; border-top: 18px solid transparent; border-bottom: 18px solid transparent; border-left: 18px solid #173e49; margin-right: -18px; } .prev:hover { content: \"\"; display: block; position: absolute; width: 0; height: 0; border-top: 18px solid transparent; border-bottom: 18px solid transparent; border-right: 18px solid #235f70; margin-left: -18px; transform: translate(0, -18px) scale(1.08); } @media (max-width: 480px) { .prev:hover { transform: translate(20px, -18px) scale(1.08); } } .next:hover { content: \"\"; display: block; position: absolute; width: 0; height: 0; border-top: 18px solid transparent; border-bottom: 18px solid transparent; border-left: 18px solid #235f70; margin-right: -18px; transform: translate(0, -18px) scale(1.08); } @media (max-width: 480px) { .next:hover { transform: translate(-20px, -18px) scale(1.08); } } .prev, .next, .prev:hover, .next:hover { transition: all 300ms; margin: 0; } .prev, .next { position: absolute; top: 50%; z-index: 20; cursor: pointer; } .prev { left: 0; transform: translate(0, -18px); } @media (max-width: 480px) { .prev { transform: translate(20px, -18px); } } .next { right: 0; transform: translate(0, -18px); } @media (max-width: 480px) { .next { transform: translate(-20px, -18px); } } .ff-slider { position: relative; display: block; -moz-box-sizing: border-box; box-sizing: border-box; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; -webkit-touch-callout: none; -ms-touch-action: pan-y; touch-action: pan-y; -webkit-tap-highlight-color: transparent; } .ff-slider__list { position: relative; display: block; overflow: hidden; margin: 0; padding: 0; } .ff-slider__tracker { position: relative; top: 0; left: 0; display: block; opacity: 1; width: 9999999px; } .ff-slider__slide { display: block; float: left; height: 100%; min-height: 1px; text-align: center; margin: 0px 20px; } .ff-slider__slide:not(.center) { cursor: pointer; opacity: 0.25; } "]
                },] },
    ];
    /*  onDragStart(event) {
            console.log('start', event);
            console.log('target', event.target.closest('.ff-slider__tracker'));
            const element = event.target.closest('.ff-slider__tracker');
            document.onmousemove = (e)=>{
              if(element){
                 let x =e.pageX - element.getBoundingClientRect().left + pageXOffset;
                 element.style.left = x + 'px';
              }
              document.onmouseup = ()=>{
                document.onmousemove = null;
                document.onmouseup = null;
              }
            };
          }*/
    /** @nocollapse */
    CarouselComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    CarouselComponent.propDecorators = {
        "autoplay": [{ type: core.Input },],
        "interval": [{ type: core.Input },],
        "animationDuration": [{ type: core.Input },],
        "buttons": [{ type: core.Input },],
        "selectItem": [{ type: core.Input },],
        "shadow": [{ type: core.Input },],
        "urlPrefix": [{ type: core.Input },],
        "images": [{ type: core.Input },],
        "onResize": [{ type: core.HostListener, args: ['window:resize', ['$event'],] },],
    };
    return CarouselComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ClonePipe = (function () {
    function ClonePipe() {
    }
    /**
     * @param {?} items
     * @param {?} numbers
     * @return {?}
     */
    ClonePipe.prototype.transform = /**
     * @param {?} items
     * @param {?} numbers
     * @return {?}
     */
    function (items, numbers) {
        if (!items) {
            return items;
        }
        var /** @type {?} */ newArr = items;
        var /** @type {?} */ firstItems = [items[0]], /** @type {?} */
        lastItems = [];
        for (var /** @type {?} */ i = 1, /** @type {?} */ len = items.length; i < len; i++) {
            var /** @type {?} */ cloneItem = items[i];
            lastItems.push(cloneItem);
        }
        while (numbers) {
            newArr = Array.prototype.concat(newArr, items);
            numbers--;
        }
        return Array.prototype.concat(lastItems, newArr, firstItems);
    };
    ClonePipe.decorators = [
        { type: core.Pipe, args: [{
                    name: 'clone',
                    pure: false
                },] },
    ];
    return ClonePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CarouselModule = (function () {
    function CarouselModule() {
    }
    /**
     * @return {?}
     */
    CarouselModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: CarouselModule,
            providers: []
        };
    };
    CarouselModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        CarouselComponent,
                        ClonePipe
                    ],
                    exports: [
                        CarouselComponent
                    ]
                },] },
    ];
    return CarouselModule;
}());

exports.CarouselModule = CarouselModule;
exports.CarouselComponent = CarouselComponent;
exports.ClonePipe = ClonePipe;

Object.defineProperty(exports, '__esModule', { value: true });

})));
