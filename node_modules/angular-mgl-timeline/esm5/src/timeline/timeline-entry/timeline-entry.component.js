/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { MglTimelineEntrySideComponent } from './../timeline-entry-side/timeline-entry-side.component';
import { MglTimelineEntryDotComponent } from './../timeline-entry-dot/timeline-entry-dot.component';
import { Component, Output, EventEmitter, ContentChild, ElementRef } from '@angular/core';
import { MglTimelineEntryContentComponent } from '../timeline-entry-content/timeline-entry-content.component';
import { MglTimelineEntryHeaderComponent } from '../timeline-entry-header/timeline-entry-header.component';
var MglTimelineEntryComponent = /** @class */ (function () {
    function MglTimelineEntryComponent(elementRef) {
        this.elementRef = elementRef;
        this.subscriptions = [];
        this.focusOnOpen = false;
        this._mobile = false;
        this.changed = new EventEmitter();
        this.animationDone = new EventEmitter();
    }
    Object.defineProperty(MglTimelineEntryComponent.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dot ? (this.dot.expanded && this.content.expanded) : this.content.expanded;
        },
        set: /**
         * @param {?} expanded
         * @return {?}
         */
        function (expanded) {
            if (this.dot && expanded) {
                this.dot.expanded = expanded;
            }
            else {
                this.content.expanded = expanded;
            }
            this.changed.emit(expanded);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryComponent.prototype, "mobile", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.elementRef.nativeElement.classList.toggle('mobile', value);
            if (this.dot) {
                this.dot.mobile = value;
            }
            if (this.side) {
                this.side.mobile = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dot) {
            this.subscriptions.push(this.dot.animationDone.subscribe(function (event) {
                if (event.toState === 'expanded') {
                    _this.content.expanded = true;
                }
                else {
                    _this.animationDone.emit(event);
                }
            }));
        }
        if (this.content) {
            this.subscriptions.push(this.content.animationDone.subscribe(function (event) {
                if (_this.dot && event.toState === 'collapsed') {
                    _this.dot.expanded = false;
                }
                else {
                    if (_this.focusOnOpen) {
                        _this.elementRef.nativeElement.scrollIntoView({ behavior: 'smooth' });
                    }
                    _this.animationDone.emit(event);
                }
            }));
        }
    };
    Object.defineProperty(MglTimelineEntryComponent.prototype, "alternate", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.elementRef.nativeElement.classList.toggle('alternate', value);
            if (this.dot) {
                this.dot.alternate = value;
            }
            if (this.side) {
                this.side.alternate = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
    };
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.collapse = /**
     * @return {?}
     */
    function () {
        this.expanded = false;
    };
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.expand = /**
     * @return {?}
     */
    function () {
        this.expanded = true;
    };
    /**
     * @return {?}
     */
    MglTimelineEntryComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.expanded = !this.expanded;
    };
    MglTimelineEntryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline-entry',
                    template: "<ng-content select=\"mgl-timeline-entry-side\"></ng-content>\n<div class=\"mgl-timeline-entry-card\">\n  <div class=\"mgl-timeline-entry-card-header\" (click)=\"toggle()\">\n    <ng-content select=\"mgl-timeline-entry-dot\"></ng-content>\n    <ng-content select=\"mgl-timeline-entry-header\"></ng-content>\n  </div>\n  <ng-content select=\"mgl-timeline-entry-content\"></ng-content>\n</div>",
                    styles: [":host{display:block;position:relative;margin-bottom:50px;width:calc(50% - 5px)}:host.alternate{margin-left:calc(50% + 5px)}:host.mobile{width:calc(100% - 30px);margin-left:30px}:host .mgl-timeline-entry-card{background-color:#f0f0f0}:host .mgl-timeline-entry-card .mgl-timeline-entry-card-header{position:relative;background-color:#e6e6e6}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineEntryComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    MglTimelineEntryComponent.propDecorators = {
        changed: [{ type: Output }],
        animationDone: [{ type: Output }],
        content: [{ type: ContentChild, args: [MglTimelineEntryContentComponent,] }],
        header: [{ type: ContentChild, args: [MglTimelineEntryHeaderComponent,] }],
        dot: [{ type: ContentChild, args: [MglTimelineEntryDotComponent,] }],
        side: [{ type: ContentChild, args: [MglTimelineEntrySideComponent,] }]
    };
    return MglTimelineEntryComponent;
}());
export { MglTimelineEntryComponent };
if (false) {
    /** @type {?} */
    MglTimelineEntryComponent.prototype.subscriptions;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.focusOnOpen;
    /** @type {?} */
    MglTimelineEntryComponent.prototype._mobile;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.changed;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.animationDone;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.content;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.header;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.dot;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.side;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtZW50cnkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1tZ2wtdGltZWxpbmUvIiwic291cmNlcyI6WyJzcmMvdGltZWxpbmUvdGltZWxpbmUtZW50cnkvdGltZWxpbmUtZW50cnkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUV2RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNwRyxPQUFPLEVBQ0wsU0FBUyxFQUFpQixNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBYSxVQUFVLEVBQ3BGLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQzlHLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDBEQUEwRCxDQUFDOztJQWlEekcsbUNBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7NkJBeENGLEVBQUU7MkJBRW5CLEtBQUs7dUJBZUQsS0FBSzt1QkFhdEIsSUFBSSxZQUFZLEVBQVc7NkJBR3JCLElBQUksWUFBWSxFQUFVO0tBT0s7SUFwQy9DLHNCQUFJLCtDQUFROzs7O1FBU1o7WUFDRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7U0FDeEY7Ozs7O1FBWEQsVUFBYSxRQUFRO1lBQ25CLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxRQUFRLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQzthQUM5QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMs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QUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsa1pBQThDOztpQkFFL0M7Ozs7Z0JBVDBFLFVBQVU7OzswQkF5Q2xGLE1BQU07Z0NBR04sTUFBTTswQkFHTixZQUFZLFNBQUMsZ0NBQWdDO3lCQUM3QyxZQUFZLFNBQUMsK0JBQStCO3NCQUM1QyxZQUFZLFNBQUMsNEJBQTRCO3VCQUN6QyxZQUFZLFNBQUMsNkJBQTZCOztvQ0F0RDdDOztTQWNhLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1nbFRpbWVsaW5lRW50cnlTaWRlQ29tcG9uZW50IH0gZnJvbSAnLi8uLi90aW1lbGluZS1lbnRyeS1zaWRlL3RpbWVsaW5lLWVudHJ5LXNpZGUuY29tcG9uZW50JztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IE1nbFRpbWVsaW5lRW50cnlEb3RDb21wb25lbnQgfSBmcm9tICcuLy4uL3RpbWVsaW5lLWVudHJ5LWRvdC90aW1lbGluZS1lbnRyeS1kb3QuY29tcG9uZW50JztcbmltcG9ydCB7XG4gIENvbXBvbmVudCwgQWZ0ZXJWaWV3SW5pdCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENvbnRlbnRDaGlsZCwgT25EZXN0cm95LCBFbGVtZW50UmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWdsVGltZWxpbmVFbnRyeUNvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuLi90aW1lbGluZS1lbnRyeS1jb250ZW50L3RpbWVsaW5lLWVudHJ5LWNvbnRlbnQuY29tcG9uZW50JztcbmltcG9ydCB7IE1nbFRpbWVsaW5lRW50cnlIZWFkZXJDb21wb25lbnQgfSBmcm9tICcuLi90aW1lbGluZS1lbnRyeS1oZWFkZXIvdGltZWxpbmUtZW50cnktaGVhZGVyLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21nbC10aW1lbGluZS1lbnRyeScsXG4gIHRlbXBsYXRlVXJsOiAnLi90aW1lbGluZS1lbnRyeS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RpbWVsaW5lLWVudHJ5LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTWdsVGltZWxpbmVFbnRyeUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIGZvY3VzT25PcGVuOiBib29sZWFuID0gZmFsc2U7XG5cbiAgc2V0IGV4cGFuZGVkKGV4cGFuZGVkKSB7XG4gICAgaWYgKHRoaXMuZG90ICYmIGV4cGFuZGVkKSB7XG4gICAgICB0aGlzLmRvdC5leHBhbmRlZCA9IGV4cGFuZGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRlbnQuZXhwYW5kZWQgPSBleHBhbmRlZFxuICAgIH1cbiAgICB0aGlzLmNoYW5nZWQuZW1pdChleHBhbmRlZCk7XG4gIH1cblxuICBnZXQgZXhwYW5kZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG90ID8gKHRoaXMuZG90LmV4cGFuZGVkICYmIHRoaXMuY29udGVudC5leHBhbmRlZCkgOiB0aGlzLmNvbnRlbnQuZXhwYW5kZWQ7XG4gIH1cblxuICBwcml2YXRlIF9tb2JpbGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBzZXQgbW9iaWxlKHZhbHVlKSB7XG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnbW9iaWxlJywgdmFsdWUpO1xuICAgIGlmICh0aGlzLmRvdCkge1xuICAgICAgdGhpcy5kb3QubW9iaWxlID0gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnNpZGUpIHtcbiAgICAgIHRoaXMuc2lkZS5tb2JpbGUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBAT3V0cHV0KClcbiAgY2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBAT3V0cHV0KClcbiAgYW5pbWF0aW9uRG9uZSA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIEBDb250ZW50Q2hpbGQoTWdsVGltZWxpbmVFbnRyeUNvbnRlbnRDb21wb25lbnQpIGNvbnRlbnQ6IE1nbFRpbWVsaW5lRW50cnlDb250ZW50Q29tcG9uZW50O1xuICBAQ29udGVudENoaWxkKE1nbFRpbWVsaW5lRW50cnlIZWFkZXJDb21wb25lbnQpIGhlYWRlcjogTWdsVGltZWxpbmVFbnRyeUhlYWRlckNvbXBvbmVudDtcbiAgQENvbnRlbnRDaGlsZChNZ2xUaW1lbGluZUVudHJ5RG90Q29tcG9uZW50KSBkb3Q6IE1nbFRpbWVsaW5lRW50cnlEb3RDb21wb25lbnQ7XG4gIEBDb250ZW50Q2hpbGQoTWdsVGltZWxpbmVFbnRyeVNpZGVDb21wb25lbnQpIHNpZGU6IE1nbFRpbWVsaW5lRW50cnlTaWRlQ29tcG9uZW50O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLmRvdCkge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5kb3QuYW5pbWF0aW9uRG9uZS5zdWJzY3JpYmUoZXZlbnQgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudG9TdGF0ZSA9PT0gJ2V4cGFuZGVkJykge1xuICAgICAgICAgIHRoaXMuY29udGVudC5leHBhbmRlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hbmltYXRpb25Eb25lLmVtaXQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmNvbnRlbnQpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMuY29udGVudC5hbmltYXRpb25Eb25lLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICAgIGlmICh0aGlzLmRvdCAmJiBldmVudC50b1N0YXRlID09PSAnY29sbGFwc2VkJykge1xuICAgICAgICAgIHRoaXMuZG90LmV4cGFuZGVkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuZm9jdXNPbk9wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmFuaW1hdGlvbkRvbmUuZW1pdChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9XG4gIH1cblxuICBzZXQgYWx0ZXJuYXRlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnYWx0ZXJuYXRlJywgdmFsdWUpO1xuICAgIGlmICh0aGlzLmRvdCkge1xuICAgICAgdGhpcy5kb3QuYWx0ZXJuYXRlID0gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnNpZGUpIHtcbiAgICAgIHRoaXMuc2lkZS5hbHRlcm5hdGUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChzdWJzY3JpcHRpb24gPT4gc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCkpO1xuICB9XG5cbiAgY29sbGFwc2UoKSB7XG4gICAgdGhpcy5leHBhbmRlZCA9IGZhbHNlO1xuICB9XG5cbiAgZXhwYW5kKCkge1xuICAgIHRoaXMuZXhwYW5kZWQgPSB0cnVlO1xuICB9XG5cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXMuZXhwYW5kZWQgPSAhdGhpcy5leHBhbmRlZDtcbiAgfVxufVxuIl19