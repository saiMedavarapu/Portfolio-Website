/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, HostBinding, ElementRef, EventEmitter, Renderer, ChangeDetectorRef } from '@angular/core';
import { AnimationBuilder, style, animate } from '@angular/animations';
var MglTimelineEntryDotComponent = /** @class */ (function () {
    function MglTimelineEntryDotComponent(animationBuilder, elementRef, renderer, changeDetectorRef) {
        this.animationBuilder = animationBuilder;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this._expanded = false;
        this._alternate = false;
        this._mobile = false;
        this._size = 50;
        this.animationDone = new EventEmitter();
        this.clazz = 'primary';
    }
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "size", {
        get: /**
         * @return {?}
         */
        function () {
            return this._size;
        },
        set: /**
         * @param {?} size
         * @return {?}
         */
        function (size) {
            this._size = size;
            this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "alternate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._alternate;
        },
        set: /**
         * @param {?} alternate
         * @return {?}
         */
        function (alternate) {
            this._alternate = alternate;
            this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "mobile", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mobile;
        },
        set: /**
         * @param {?} mobile
         * @return {?}
         */
        function (mobile) {
            this._mobile = mobile;
            this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MglTimelineEntryDotComponent.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expanded;
        },
        set: /**
         * @param {?} expanded
         * @return {?}
         */
        function (expanded) {
            /** @type {?} */
            var animate = this._expanded !== expanded;
            this._expanded = expanded;
            animate ? this.animate() : this.setStyle();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initialStyle = window.getComputedStyle(this.elementRef.nativeElement);
        this.setStyle();
        this.changeDetectorRef.detectChanges();
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.getCollapsedStyle = /**
     * @return {?}
     */
    function () {
        return {
            top: '50%',
            left: (this.alternate || this.mobile) ? '-5px' : 'calc(100% + 5px)',
            width: this.size + 'px',
            height: this.size + 'px',
            opacity: 1,
            transform: 'translateY(-50%) translateX(-50%)',
            boxShadow: this.initialStyle && this.initialStyle.boxShadow,
            borderRadius: '100px'
        };
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.getTransitionStyle = /**
     * @return {?}
     */
    function () {
        return tslib_1.__assign({}, this.getCollapsedStyle(), { left: '50%', opacity: 0.5, boxShadow: 'none' });
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.getExpandedStyle = /**
     * @return {?}
     */
    function () {
        return tslib_1.__assign({}, this.getTransitionStyle(), { left: '0', transform: 'translateX(0) translateY(-50%)', width: '100%', height: '100%', opacity: 1, borderRadius: 0 });
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.animate = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.destroyAnimation();
        if (this.expanded) {
            this.animation = this.animationBuilder
                .build([
                style(this.getCollapsedStyle()),
                animate('200ms ease', style(this.getTransitionStyle())),
                animate('200ms ease', style(this.getExpandedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            this.animation.onDone(function () { return _this.animationDone.emit({ toState: 'expanded' }); });
            this.animation.play();
        }
        else {
            this.animationBuilder;
            this.animation = this.animationBuilder
                .build([
                style(this.getExpandedStyle()),
                animate('100ms ease', style(this.getTransitionStyle())),
                animate('100ms ease', style(this.getCollapsedStyle())),
            ])
                .create(this.elementRef.nativeElement);
            this.animation.onDone(function () { return _this.animationDone.emit({ toState: 'collapsed' }); });
            this.animation.play();
        }
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.setStyle = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.destroyAnimation();
        /** @type {?} */
        var baseStyle = this.expanded ? this.getExpandedStyle() : this.getCollapsedStyle();
        Object.keys(baseStyle).forEach(function (property) {
            _this.renderer.setElementStyle(_this.elementRef.nativeElement, property, baseStyle[property]);
        });
    };
    /**
     * @return {?}
     */
    MglTimelineEntryDotComponent.prototype.destroyAnimation = /**
     * @return {?}
     */
    function () {
        if (this.animation) {
            this.animation.destroy();
            delete this.animation;
        }
    };
    MglTimelineEntryDotComponent.decorators = [
        { type: Component, args: [{
                    selector: 'mgl-timeline-entry-dot',
                    template: "<ng-content></ng-content>\n",
                    styles: [":host{display:block;position:absolute}"]
                }] }
    ];
    /** @nocollapse */
    MglTimelineEntryDotComponent.ctorParameters = function () { return [
        { type: AnimationBuilder },
        { type: ElementRef },
        { type: Renderer },
        { type: ChangeDetectorRef }
    ]; };
    MglTimelineEntryDotComponent.propDecorators = {
        clazz: [{ type: Input, args: ['class',] }, { type: HostBinding, args: ['class',] }],
        size: [{ type: Input }]
    };
    return MglTimelineEntryDotComponent;
}());
export { MglTimelineEntryDotComponent };
if (false) {
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype._expanded;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype._alternate;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype._mobile;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype.initialStyle;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype._size;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype.animation;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype.animationDone;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype.clazz;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype.animationBuilder;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype.elementRef;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype.renderer;
    /** @type {?} */
    MglTimelineEntryDotComponent.prototype.changeDetectorRef;
}

//# sourceMappingURL=data:application/json;base64,