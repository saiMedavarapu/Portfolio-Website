/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { MglTimelineEntrySideComponent } from './../timeline-entry-side/timeline-entry-side.component';
import { MglTimelineEntryDotComponent } from './../timeline-entry-dot/timeline-entry-dot.component';
import { Component, Output, EventEmitter, ContentChild, ElementRef } from '@angular/core';
import { MglTimelineEntryContentComponent } from '../timeline-entry-content/timeline-entry-content.component';
import { MglTimelineEntryHeaderComponent } from '../timeline-entry-header/timeline-entry-header.component';
export class MglTimelineEntryComponent {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.subscriptions = [];
        this.focusOnOpen = false;
        this._mobile = false;
        this.changed = new EventEmitter();
        this.animationDone = new EventEmitter();
    }
    /**
     * @param {?} expanded
     * @return {?}
     */
    set expanded(expanded) {
        if (this.dot && expanded) {
            this.dot.expanded = expanded;
        }
        else {
            this.content.expanded = expanded;
        }
        this.changed.emit(expanded);
    }
    /**
     * @return {?}
     */
    get expanded() {
        return this.dot ? (this.dot.expanded && this.content.expanded) : this.content.expanded;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set mobile(value) {
        this.elementRef.nativeElement.classList.toggle('mobile', value);
        if (this.dot) {
            this.dot.mobile = value;
        }
        if (this.side) {
            this.side.mobile = value;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.dot) {
            this.subscriptions.push(this.dot.animationDone.subscribe(event => {
                if (event.toState === 'expanded') {
                    this.content.expanded = true;
                }
                else {
                    this.animationDone.emit(event);
                }
            }));
        }
        if (this.content) {
            this.subscriptions.push(this.content.animationDone.subscribe(event => {
                if (this.dot && event.toState === 'collapsed') {
                    this.dot.expanded = false;
                }
                else {
                    if (this.focusOnOpen) {
                        this.elementRef.nativeElement.scrollIntoView({ behavior: 'smooth' });
                    }
                    this.animationDone.emit(event);
                }
            }));
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set alternate(value) {
        this.elementRef.nativeElement.classList.toggle('alternate', value);
        if (this.dot) {
            this.dot.alternate = value;
        }
        if (this.side) {
            this.side.alternate = value;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
    }
    /**
     * @return {?}
     */
    collapse() {
        this.expanded = false;
    }
    /**
     * @return {?}
     */
    expand() {
        this.expanded = true;
    }
    /**
     * @return {?}
     */
    toggle() {
        this.expanded = !this.expanded;
    }
}
MglTimelineEntryComponent.decorators = [
    { type: Component, args: [{
                selector: 'mgl-timeline-entry',
                template: "<ng-content select=\"mgl-timeline-entry-side\"></ng-content>\n<div class=\"mgl-timeline-entry-card\">\n  <div class=\"mgl-timeline-entry-card-header\" (click)=\"toggle()\">\n    <ng-content select=\"mgl-timeline-entry-dot\"></ng-content>\n    <ng-content select=\"mgl-timeline-entry-header\"></ng-content>\n  </div>\n  <ng-content select=\"mgl-timeline-entry-content\"></ng-content>\n</div>",
                styles: [":host{display:block;position:relative;margin-bottom:50px;width:calc(50% - 5px)}:host.alternate{margin-left:calc(50% + 5px)}:host.mobile{width:calc(100% - 30px);margin-left:30px}:host .mgl-timeline-entry-card{background-color:#f0f0f0}:host .mgl-timeline-entry-card .mgl-timeline-entry-card-header{position:relative;background-color:#e6e6e6}"]
            }] }
];
/** @nocollapse */
MglTimelineEntryComponent.ctorParameters = () => [
    { type: ElementRef }
];
MglTimelineEntryComponent.propDecorators = {
    changed: [{ type: Output }],
    animationDone: [{ type: Output }],
    content: [{ type: ContentChild, args: [MglTimelineEntryContentComponent,] }],
    header: [{ type: ContentChild, args: [MglTimelineEntryHeaderComponent,] }],
    dot: [{ type: ContentChild, args: [MglTimelineEntryDotComponent,] }],
    side: [{ type: ContentChild, args: [MglTimelineEntrySideComponent,] }]
};
if (false) {
    /** @type {?} */
    MglTimelineEntryComponent.prototype.subscriptions;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.focusOnOpen;
    /** @type {?} */
    MglTimelineEntryComponent.prototype._mobile;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.changed;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.animationDone;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.content;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.header;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.dot;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.side;
    /** @type {?} */
    MglTimelineEntryComponent.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtZW50cnkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1tZ2wtdGltZWxpbmUvIiwic291cmNlcyI6WyJzcmMvdGltZWxpbmUvdGltZWxpbmUtZW50cnkvdGltZWxpbmUtZW50cnkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUV2RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUNwRyxPQUFPLEVBQ0wsU0FBUyxFQUFpQixNQUFNLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBYSxVQUFVLEVBQ3BGLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQzlHLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBTzNHLE1BQU07Ozs7SUEwQ0osWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTs2QkF4Q0YsRUFBRTsyQkFFbkIsS0FBSzt1QkFlRCxLQUFLO3VCQWF0QixJQUFJLFlBQVksRUFBVzs2QkFHckIsSUFBSSxZQUFZLEVBQVU7S0FPSzs7Ozs7SUFwQy9DLElBQUksUUFBUSxDQUFDLFFBQVE7UUFDbkIsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLFFBQVEsRUFBRTtZQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDOUI7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtTQUNqQztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzdCOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FB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QkFHTixNQUFNO3NCQUdOLFlBQVksU0FBQyxnQ0FBZ0M7cUJBQzdDLFlBQVksU0FBQywrQkFBK0I7a0JBQzVDLFlBQVksU0FBQyw0QkFBNEI7bUJBQ3pDLFlBQVksU0FBQyw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZ2xUaW1lbGluZUVudHJ5U2lkZUNvbXBvbmVudCB9IGZyb20gJy4vLi4vdGltZWxpbmUtZW50cnktc2lkZS90aW1lbGluZS1lbnRyeS1zaWRlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBNZ2xUaW1lbGluZUVudHJ5RG90Q29tcG9uZW50IH0gZnJvbSAnLi8uLi90aW1lbGluZS1lbnRyeS1kb3QvdGltZWxpbmUtZW50cnktZG90LmNvbXBvbmVudCc7XG5pbXBvcnQge1xuICBDb21wb25lbnQsIEFmdGVyVmlld0luaXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBDb250ZW50Q2hpbGQsIE9uRGVzdHJveSwgRWxlbWVudFJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1nbFRpbWVsaW5lRW50cnlDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi4vdGltZWxpbmUtZW50cnktY29udGVudC90aW1lbGluZS1lbnRyeS1jb250ZW50LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNZ2xUaW1lbGluZUVudHJ5SGVhZGVyQ29tcG9uZW50IH0gZnJvbSAnLi4vdGltZWxpbmUtZW50cnktaGVhZGVyL3RpbWVsaW5lLWVudHJ5LWhlYWRlci5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtZ2wtdGltZWxpbmUtZW50cnknLFxuICB0ZW1wbGF0ZVVybDogJy4vdGltZWxpbmUtZW50cnkuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi90aW1lbGluZS1lbnRyeS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIE1nbFRpbWVsaW5lRW50cnlDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcblxuICBmb2N1c09uT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHNldCBleHBhbmRlZChleHBhbmRlZCkge1xuICAgIGlmICh0aGlzLmRvdCAmJiBleHBhbmRlZCkge1xuICAgICAgdGhpcy5kb3QuZXhwYW5kZWQgPSBleHBhbmRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250ZW50LmV4cGFuZGVkID0gZXhwYW5kZWRcbiAgICB9XG4gICAgdGhpcy5jaGFuZ2VkLmVtaXQoZXhwYW5kZWQpO1xuICB9XG5cbiAgZ2V0IGV4cGFuZGVkKCkge1xuICAgIHJldHVybiB0aGlzLmRvdCA/ICh0aGlzLmRvdC5leHBhbmRlZCAmJiB0aGlzLmNvbnRlbnQuZXhwYW5kZWQpIDogdGhpcy5jb250ZW50LmV4cGFuZGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBfbW9iaWxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgc2V0IG1vYmlsZSh2YWx1ZSkge1xuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ21vYmlsZScsIHZhbHVlKTtcbiAgICBpZiAodGhpcy5kb3QpIHtcbiAgICAgIHRoaXMuZG90Lm1vYmlsZSA9IHZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zaWRlKSB7XG4gICAgICB0aGlzLnNpZGUubW9iaWxlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgQE91dHB1dCgpXG4gIGNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgQE91dHB1dCgpXG4gIGFuaW1hdGlvbkRvbmUgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBAQ29udGVudENoaWxkKE1nbFRpbWVsaW5lRW50cnlDb250ZW50Q29tcG9uZW50KSBjb250ZW50OiBNZ2xUaW1lbGluZUVudHJ5Q29udGVudENvbXBvbmVudDtcbiAgQENvbnRlbnRDaGlsZChNZ2xUaW1lbGluZUVudHJ5SGVhZGVyQ29tcG9uZW50KSBoZWFkZXI6IE1nbFRpbWVsaW5lRW50cnlIZWFkZXJDb21wb25lbnQ7XG4gIEBDb250ZW50Q2hpbGQoTWdsVGltZWxpbmVFbnRyeURvdENvbXBvbmVudCkgZG90OiBNZ2xUaW1lbGluZUVudHJ5RG90Q29tcG9uZW50O1xuICBAQ29udGVudENoaWxkKE1nbFRpbWVsaW5lRW50cnlTaWRlQ29tcG9uZW50KSBzaWRlOiBNZ2xUaW1lbGluZUVudHJ5U2lkZUNvbXBvbmVudDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAodGhpcy5kb3QpIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMuZG90LmFuaW1hdGlvbkRvbmUuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LnRvU3RhdGUgPT09ICdleHBhbmRlZCcpIHtcbiAgICAgICAgICB0aGlzLmNvbnRlbnQuZXhwYW5kZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYW5pbWF0aW9uRG9uZS5lbWl0KGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb250ZW50KSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaCh0aGlzLmNvbnRlbnQuYW5pbWF0aW9uRG9uZS5zdWJzY3JpYmUoZXZlbnQgPT4ge1xuICAgICAgICBpZiAodGhpcy5kb3QgJiYgZXZlbnQudG9TdGF0ZSA9PT0gJ2NvbGxhcHNlZCcpIHtcbiAgICAgICAgICB0aGlzLmRvdC5leHBhbmRlZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLmZvY3VzT25PcGVuKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5hbmltYXRpb25Eb25lLmVtaXQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfVxuICB9XG5cbiAgc2V0IGFsdGVybmF0ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ2FsdGVybmF0ZScsIHZhbHVlKTtcbiAgICBpZiAodGhpcy5kb3QpIHtcbiAgICAgIHRoaXMuZG90LmFsdGVybmF0ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5zaWRlKSB7XG4gICAgICB0aGlzLnNpZGUuYWx0ZXJuYXRlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpKTtcbiAgfVxuXG4gIGNvbGxhcHNlKCkge1xuICAgIHRoaXMuZXhwYW5kZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGV4cGFuZCgpIHtcbiAgICB0aGlzLmV4cGFuZGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRvZ2dsZSgpIHtcbiAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XG4gIH1cbn1cbiJdfQ==